<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用Hexo博客框架搭建静态博客</title>
    <link href="/2021/04/06/%E4%BD%BF%E7%94%A8Hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/04/06/%E4%BD%BF%E7%94%A8Hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章用于记录如何在 Windows 中使用 Hexo 框架搭建个人静态博客。</p><p>在该篇文章中，您将会看到：静态博客搭建相关技术简介、博客搭建流程、使用主题来美化博客、将博客发布至 GitHub、博客功能添加及优化。</p><p>一些碎语：</p><p>在不同的操作系统中搭建静态博客的方法大同小异，因此此篇文章步骤也基本适用于其它操作系统。</p><p>博客搭建过程中难免会遇到不同问题，您可能和本人一样有着轻微的强迫症，不容许搭建过程中产生半点冗余内容，不用担心，此博客的所有内容都汇集在一个文件夹中，若搭建过程中遇到难以解决的问题，直接干掉未搭建完成的博客文件夹即可，而且如果完全按照此文章进行博客创建，途中产生的警告可完全忽略。</p><p>个人在两种操作系统中都搭建过静态博客，由于文件系统和权限等原因，在 Linux 中的安装流程更为顺畅，但由于Windows环境下能更加方便地编写发布博客，因此最后选择了 Windows。</p><p>此后可能会写将博客部署到云服务器的操作流程，但这是后话了，此时先专注于本篇文章。</p><h1 id="相关内容简介"><a href="#相关内容简介" class="headerlink" title="相关内容简介"></a>相关内容简介</h1><p>对相关技术了解较深或不感兴趣可以跳过该部分。</p><p>该部分将会简要介绍搭建静态博客时所涉及到的部分术语和相关技术，仅做简要介绍，具体请自行进行搜索。</p><p><strong>动态博客和静态博客</strong></p><p>此处的两种术语表示了两种不同的博客搭建形式，基本类似于静态网站和动态网站的区别。</p><p>动态博客，是指具有前端和后端的动态博客网站，类似于 CSDN、博客园等博客论坛，可以实现网站代码编写和功能使用的分离，其灵活性、易用性和功能性相较于静态博客都比较高。</p><p>静态博客，是指使用纯前端的形式搭建的静态博客网站，由于没有后台管理，因此对静态博客的每一个操作都与代码耦合，更难使用且功能更少，并且缺少动态交互。</p><p><strong>Hexo</strong></p><p>Hexo 是一个快速、简洁且高效的静态博客框架。该框架基于Node.js运行环境，能够帮助我们快速地搭建静态博客。</p><p><strong>Node.js</strong></p><p>“Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript Engine.”</p><p>Node.js 不是一门编程语言，而是基于Chrome V8引擎的JavaScript语言运行环境，是一种宿主环境，类似于浏览器。</p><p><strong>GitHub</strong></p><p>GitHub 是一个开源的软件项目托管平台，由于其使用 Git 作为版本库格式进行托管，因此被命名为 GitHub。</p><p><strong>Git</strong></p><p>Git 是目前世界上较为先进的分布式版本控制系统，通过 Git，您可以方便地对项目的改动进行记录，还可以与其他人进行协作编辑，从而实现对项目的版本进行管理。</p><h1 id="静态博客搭建流程（Windows）"><a href="#静态博客搭建流程（Windows）" class="headerlink" title="静态博客搭建流程（Windows）"></a>静态博客搭建流程（Windows）</h1><p>该部分将展示 Windows 10 系统下静态博客的搭建流程，其中省略了一些较为简单的操作步骤。</p><p><strong>强烈建议在管理员模式下的命令行执行该流程。</strong></p><h2 id="1-下载-Node-js-和-Git"><a href="#1-下载-Node-js-和-Git" class="headerlink" title="1. 下载 Node.js 和 Git"></a>1. 下载 Node.js 和 Git</h2><p>个人建议从官方网站下载最新版本的Node.js和Git。</p><p><a href="https://nodejs.org/">Node.js 官方网站</a></p><p><a href="https://git-scm.com/">Git 官方网站</a></p><p>关于 Node.js 和 Git 的详细安装和环境配置流程，由于不属于本篇的主要内容，且流程对后续步骤影响不大，故不再列出，您可自行进行搜索，或直接采用默认的安装选项安装即可，必须确保两者被成功安装。</p><p><strong>检查 Node.js 和 Git 是否安装以及配置成功</strong></p><p>打开 Windows 的命令行工具，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ node -v<br></code></pre></td></tr></table></figure><p>若弹出 Node.js 版本信息，说明 Node.js 安装成功。</p><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git<br></code></pre></td></tr></table></figure><p>若弹出 Git 的命令使用说明，说明 Git 安装成功。</p><h2 id="2-通过-Node-js-的-npm-安装-Hexo"><a href="#2-通过-Node-js-的-npm-安装-Hexo" class="headerlink" title="2. 通过 Node.js 的 npm 安装 Hexo"></a>2. 通过 Node.js 的 npm 安装 Hexo</h2><p>完成此部分，您就基本准备好了博客搭建所需要的工具。</p><p><strong>npm</strong></p><p>Node.js 的包管理器，允许客户从npm服务器中下载第三方的包到本地使用。在 Node.js 安装时自带。</p><h3 id="2-1-安装-cnpm（可选）"><a href="#2-1-安装-cnpm（可选）" class="headerlink" title="2.1. 安装 cnpm（可选）"></a>2.1. 安装 cnpm（可选）</h3><p>由于 npm 的镜像位于国外，因此下载速度较慢，cnpm 是中国的 npm 镜像客户端，此处将 cnpm 的镜像源指向淘宝的镜像源，后续的 npm 命令可以使用 cnpm 代替，npm 命令的详细含义可自行百度搜索，此处不再列出。</p><p>若您对所处的网络环境很自信，或者有 VPN，觉得没有这个必要，可跳过此步骤。</p><p>进入 Windows 命令行工具，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>此后，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cnpm<br></code></pre></td></tr></table></figure><p>若弹出 cnpm 的命令使用说明，说明 cnpm 安装成功。</p><p>此处 cnpm 被安装在 npm 的默认路径，您可以通过修改此路径来统一管理包。</p><h3 id="2-2-安装Hexo"><a href="#2-2-安装Hexo" class="headerlink" title="2.2. 安装Hexo"></a>2.2. 安装Hexo</h3><p><strong>若您安装了 cnpm，将下面的 npm 改为 cnpm 即可。</strong></p><p>打开 Windows 命令行，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>此后，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo -v<br></code></pre></td></tr></table></figure><p>来验证 Hexo 框架是否安装完成。</p><h2 id="3-使用-Hexo-搭建并查看本地网站"><a href="#3-使用-Hexo-搭建并查看本地网站" class="headerlink" title="3. 使用 Hexo 搭建并查看本地网站"></a>3. 使用 Hexo 搭建并查看本地网站</h2><p>完成此部分，您可以获得一个默认的博客网站。</p><h3 id="3-1-在指定路径创建博客文件夹"><a href="#3-1-在指定路径创建博客文件夹" class="headerlink" title="3.1. 在指定路径创建博客文件夹"></a>3.1. 在指定路径创建博客文件夹</h3><p>在您喜欢的路径上创建一个 Blog 文件夹后，在命令行输入（以下命令仅是示例，请按照此格式更改为您自己的文件夹）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> C:\Code\Blog<br></code></pre></td></tr></table></figure><p>便可跳转到此文件夹中。</p><h3 id="3-2-使用-Hexo-生成博客"><a href="#3-2-使用-Hexo-生成博客" class="headerlink" title="3.2. 使用 Hexo 生成博客"></a>3.2. 使用 Hexo 生成博客</h3><p>执行步骤3.1后，在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init<br></code></pre></td></tr></table></figure><p>来生成一个默认的新博客。</p><p><strong>您可能会遇到以下错误：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/RoOtZwY/github-img/img/blog0-0.png" alt="错误报告"></p><p>这是因为连接 GitHub 超时，您可以使用 VPN、更换网络或稍后再试。</p><p><strong>当最后一行出现：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">INFO Start blogging with Hexo!<br></code></pre></td></tr></table></figure><p>说明博客生成成功。</p><h3 id="3-3-本地查看网站"><a href="#3-3-本地查看网站" class="headerlink" title="3.3. 本地查看网站"></a>3.3. 本地查看网站</h3><p>在命令行输入（注意，务必在自己创建的博客目录下输入这条命令）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>即可启动本地博客，默认地址一般为：<a href="http://localhost:4000/">http://localhost:4000/</a> 。您可在启动后展示的信息中找到此地址（黄色部分）：</p><p><img src="https://cdn.jsdelivr.net/gh/RoOtZwY/github-img/img/blog0-1.png" alt="localhost"></p><p>该端口可能会被占用，此时修改默认启用的端口即可。</p><p>随后打开浏览器，输入该地址，您便会看到一个默认的博客页面：</p><p><img src="https://cdn.jsdelivr.net/gh/RoOtZwY/github-img/img/blog0-2.png" alt="默认界面"></p><p>至此，博客便已搭建成功。</p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>在<a href="https://hexo.io/zh-cn/docs/"> Hexo 官方文档 </a>中的Hexo概述中有这么一段话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">安装 Hexo<br>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。<br>$ npm install -g hexo-cli<br><br>进阶安装和使用<br>对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。<br>$ npm install hexo<br></code></pre></td></tr></table></figure><p><strong>那么 Hexo 和 Hexo-cli 有什么区别呢？</strong></p><p>hexo 包是基于 Node.js 的一个静态博客生成工具。而 hexo-cli 包则将 hexo 包中的功能封装为一个命令行工具。</p><p>换句话说：hexo-cli == Hexo Command Line Interface</p><p>例如，在执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br></code></pre></td></tr></table></figure><p>的时候，hexo-cli 会自动从 GitHub 中下载 hexo 到博客文件夹的 node_modules 目录下。</p><p>此外，上述流程中的 hexo 相关命令都是由于 hexo-cli 进行了封装，才能使用。</p><h2 id="4-使用Fluid主题美化博客"><a href="#4-使用Fluid主题美化博客" class="headerlink" title="4. 使用Fluid主题美化博客"></a>4. 使用Fluid主题美化博客</h2><p>完成此步骤，您将获得一个搭载了默认 Fluid 主题的静态博客。</p><p><img src="https://camo.githubusercontent.com/48b250de82787ee8090df0e3a3088e10d09a12b58fe1df55045f2476aca20978/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f666c7569642d6465762f737461746963406d61737465722f6865786f2d7468656d652d666c7569642f73637265656e73686f74732f696e6465782e706e67" alt="Fluid主题预览"></p><p>该主题有详尽的中文用户手册，可自行进入 <a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a> 来添加该主题，以下仅提供一些注意事项。</p><h4 id="4-1-注意事项"><a href="#4-1-注意事项" class="headerlink" title="4.1. 注意事项"></a>4.1. 注意事项</h4><p>进入 博客文件夹\node_modules\hexo 路径中，打开 package.json 文件，便可查看hexo的版本：</p><p><img src="https://cdn.jsdelivr.net/gh/RoOtZwY/github-img/img/blog0-3.png" alt="hexo版本"></p><p>在此文章发布时，该hexo版本是大于 5.0 的。因此在获取 Fluid 主题的最新版本时，推荐按照 Fluid 用户手册中的方法一来获取最新版本，不然可能在安装主题后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>时，Fluid 主题会产生一个警告，按照方法一安装，则完美运行。</p><h2 id="5-将博客发布至-GitHub"><a href="#5-将博客发布至-GitHub" class="headerlink" title="5.将博客发布至 GitHub"></a>5.将博客发布至 GitHub</h2><p>完成此步骤，将会把个人博客部署至GitHub，实现在线浏览。</p><h3 id="5-1-在GitHub新建仓库"><a href="#5-1-在GitHub新建仓库" class="headerlink" title="5.1. 在GitHub新建仓库"></a>5.1. 在GitHub新建仓库</h3><p>在浏览器打开GitHub，登录后创建一个新仓库（Repository）：</p><p><img src="https://cdn.jsdelivr.net/gh/RoOtZwY/github-img/img/blog0-4.png" alt="新仓库"></p><p>注意，仓库名必须要以你的用户名为开头，后跟 .github.io 。</p><p>最后滑到最下方点击 New Repository，则仓库创建成功。</p><h3 id="5-2-在博客目录下安装Git部署依赖"><a href="#5-2-在博客目录下安装Git部署依赖" class="headerlink" title="5.2. 在博客目录下安装Git部署依赖"></a>5.2. 在博客目录下安装Git部署依赖</h3><p>打开命令行，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> 博客目录路径<br></code></pre></td></tr></table></figure><p>进入博客目录。</p><p>随后，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>来安装 Hexo 的 Git 部署工具。</p><h3 id="5-3-编辑博客目录下的-config-yml-文件"><a href="#5-3-编辑博客目录下的-config-yml-文件" class="headerlink" title="5.3. 编辑博客目录下的 _config.yml 文件"></a>5.3. 编辑博客目录下的 _config.yml 文件</h3><p>打开博客主目录下的 _config.yml 文件，找到 deploy 属性，进行如下图编辑：</p><p><img src="https://cdn.jsdelivr.net/gh/RoOtZwY/github-img/img/blog0-5.png" alt="config文件编辑"></p><p>其中，repo 处填写创建项目的地址：</p><p><img src="https://cdn.jsdelivr.net/gh/RoOtZwY/github-img/img/blog0-6.png" alt="地址"></p><p>编辑完成后，保存并关闭。</p><h3 id="5-4-将博客部署至GitHub"><a href="#5-4-将博客部署至GitHub" class="headerlink" title="5.4. 将博客部署至GitHub"></a>5.4. 将博客部署至GitHub</h3><p>打开命令行工具，移动到博客目录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure><p>随后在弹出的图形界面或命令行界面输入GitHub的账号密码即可完成部署。</p><p>最后，在浏览器地址栏输入仓库名即可访问博客。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
